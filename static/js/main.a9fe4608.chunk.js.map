{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","isCompletel","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA8DmBA,MA3DnB,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAAAC,GACnBP,EAASO,EAAEC,OAAOV,QAGdW,EAAe,SAAAF,GACnBA,EAAEG,iBAGFf,EAAMgB,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAERC,EAAS,KAGT,OACI,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SACGtB,EAAME,KACL,qCACE,uBACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,wBAAQK,QAASb,EAAcQ,UAAU,mBAAzC,uBAKF,qCACE,uBACEC,YAAY,WACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,4B,eCPCM,MAxCd,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC9C,EAAwB/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAM,KAFV,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACJhB,GAAI,KACJd,MAAM,QAQP0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACId,UAAWa,EAAKE,WAAa,oBAAsB,WADvD,UAII,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKlB,KAApD,SACKkB,EAAKd,MADAc,EAAKlB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIK,QAAS,kBAAMI,EAAWI,EAAKlB,KAC/BK,UAAU,gBAEd,cAAC,IAAD,CACIK,QAAS,kBAAMM,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAClDC,UAAU,mBAZbc,OC+BFE,MAtDf,WACG,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAuCC,OACI,gCACI,iDACA,cAAC,EAAD,CAAUvB,SAxCH,SAAAmB,GACZ,GAAKA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAApC,CAIA,IAAMoB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OAkCJ,cAAC,EAAD,CACIZ,MAAOA,EACPC,aAhBQ,SAAAb,GACjB,IAAIyB,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKlB,KAAOA,IACZkB,EAAKE,YAAcF,EAAKQ,aAErBR,KAEXI,EAASG,IAUAX,WAxBM,SAAAd,GACf,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KAExDsB,EAASK,IAsBAZ,WAlCM,SAACc,EAAQC,GAClBA,EAAS1B,OAAQ,QAAQmB,KAAKO,EAAS1B,OAI5CkB,GAAS,SAAAS,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCZ5DC,MARf,WACI,OACI,qBAAK5B,UAAU,WAAf,SACI,cAAC,EAAD,OCCZ6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a9fe4608.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// App's form for user input\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault(); // Stop refreshing\r\n\r\n    // Generates colors for task items\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input\r\n    });\r\n    setInput('');\r\n  };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n          {props.edit ? (\r\n            <>\r\n              <input // Edit button\r\n                placeholder='Update your item'\r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text'\r\n                ref={inputRef}\r\n                className='todo-input edit'\r\n              />\r\n              <button onClick={handleSubmit} className='todo-button edit'>\r\n                Update\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <input // Add task \r\n                placeholder='Add task'\r\n                value={input}\r\n                onChange={handleChange}\r\n                name='text'\r\n                className='todo-input'\r\n                ref={inputRef}\r\n              />\r\n              <button onClick={handleSubmit} className='todo-button'>\r\n                Add task\r\n              </button>\r\n            </>\r\n          )}\r\n        </form>\r\n      );\r\n    }\r\n    \r\n    export default TodoForm;","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\n// App's \"task item\" function\r\n function Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value:''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value:''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    } \r\n\r\n    return todos.map((todo, index) => (\r\n        <div \r\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}        \r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine \r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <TiEdit \r\n                    onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'\r\n                />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n   const [todos, setTodos] = useState([]);\r\n\r\n   const addTodo = todo => {\r\n       if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n           return;\r\n       }\r\n\r\n       const newTodos = [todo, ...todos];\r\n\r\n       setTodos(newTodos);\r\n   };\r\n\r\n   // Update Button\r\n   const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        } \r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n   }\r\n\r\n   // Remove Button\r\n   const removeTodo = id => {\r\n       const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n       setTodos(removeArr);\r\n   }\r\n\r\n   // Complete / crossout \r\n   const completeTodo = id => {\r\n       let updatedTodos = todos.map(todo => {\r\n           if (todo.id === id) {\r\n               todo.isComplete = !todo.isCompletel;\r\n           }\r\n           return todo;\r\n       });\r\n       setTodos(updatedTodos);\r\n   };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Whats the Plan?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo \r\n                todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='todo-app'>\r\n            <TodoList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\n\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}